[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

[project]
name = "bandit"
description = "Security oriented static analyser for python code."
readme = "README.rst"
authors = [{name = "PyCQA", email = "code-quality@python.org"}]
license = {text = "Apache-2.0 license"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Security",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://bandit.readthedocs.io/"
"Release Notes" = "https://github.com/PyCQA/bandit/releases"
"Source Code" = "https://github.com/PyCQA/bandit"
"Issue Tracker" = "https://github.com/PyCQA/bandit/issues"

[project.scripts]
bandit = "bandit.cli.main:main"
bandit-config-generator = "bandit.cli.config_generator:main"
bandit-baseline = "bandit.cli.baseline:main"

[project.entry-points."bandit.blacklists"]
calls = "bandit.blacklists.calls:gen_blacklist"
imports = "bandit.blacklists.imports:gen_blacklist"

[project.entry-points."bandit.formatters"]
csv = "bandit.formatters.csv:report"
json = "bandit.formatters.json:report"
txt = "bandit.formatters.text:report"
xml = "bandit.formatters.xml:report"
html = "bandit.formatters.html:report"
screen = "bandit.formatters.screen:report"
yaml = "bandit.formatters.yaml:report"
custom = "bandit.formatters.custom:report"

[project.entry-points."bandit.plugins"]
flask_debug_true = "bandit.plugins.app_debug:flask_debug_true"
assert_used = "bandit.plugins.asserts:assert_used"
request_with_no_cert_validation = "bandit.plugins.crypto_request_no_cert_validation:request_with_no_cert_validation"
request_without_timeout = "bandit.plugins.request_without_timeout:request_without_timeout"
exec_used = "bandit.plugins.exec:exec_used"
set_bad_file_permissions = "bandit.plugins.general_bad_file_permissions:set_bad_file_permissions"
hardcoded_bind_all_interfaces = "bandit.plugins.general_bind_all_interfaces:hardcoded_bind_all_interfaces"
hardcoded_password_string = "bandit.plugins.general_hardcoded_password:hardcoded_password_string"
hardcoded_password_funcarg = "bandit.plugins.general_hardcoded_password:hardcoded_password_funcarg"
hardcoded_password_default = "bandit.plugins.general_hardcoded_password:hardcoded_password_default"
hardcoded_tmp_directory = "bandit.plugins.general_hardcoded_tmp:hardcoded_tmp_directory"
paramiko_calls = "bandit.plugins.injection_paramiko:paramiko_calls"
subprocess_popen_with_shell_equals_true = "bandit.plugins.injection_shell:subprocess_popen_with_shell_equals_true"
subprocess_without_shell_equals_true = "bandit.plugins.injection_shell:subprocess_without_shell_equals_true"
any_other_function_with_shell_equals_true = "bandit.plugins.injection_shell:any_other_function_with_shell_equals_true"
start_process_with_a_shell = "bandit.plugins.injection_shell:start_process_with_a_shell"
start_process_with_no_shell = "bandit.plugins.injection_shell:start_process_with_no_shell"
start_process_with_partial_path = "bandit.plugins.injection_shell:start_process_with_partial_path"
hardcoded_sql_expressions = "bandit.plugins.injection_sql:hardcoded_sql_expressions"
hashlib_insecure_functions = "bandit.plugins.hashlib_insecure_functions:hashlib"
linux_commands_wildcard_injection = "bandit.plugins.injection_wildcard:linux_commands_wildcard_injection"
django_extra_used = "bandit.plugins.django_sql_injection:django_extra_used"
django_rawsql_used = "bandit.plugins.django_sql_injection:django_rawsql_used"
ssl_with_bad_version = "bandit.plugins.insecure_ssl_tls:ssl_with_bad_version"
ssl_with_bad_defaults = "bandit.plugins.insecure_ssl_tls:ssl_with_bad_defaults"
ssl_with_no_version = "bandit.plugins.insecure_ssl_tls:ssl_with_no_version"
jinja2_autoescape_false = "bandit.plugins.jinja2_templates:jinja2_autoescape_false"
use_of_mako_templates = "bandit.plugins.mako_templates:use_of_mako_templates"
django_mark_safe = "bandit.plugins.django_xss:django_mark_safe"
try_except_continue = "bandit.plugins.try_except_continue:try_except_continue"
try_except_pass = "bandit.plugins.try_except_pass:try_except_pass"
weak_cryptographic_key = "bandit.plugins.weak_cryptographic_key:weak_cryptographic_key"
yaml_load = "bandit.plugins.yaml_load:yaml_load"
ssh_no_host_key_verification = "bandit.plugins.ssh_no_host_key_verification:ssh_no_host_key_verification"
snmp_insecure_version = "bandit.plugins.snmp_security_check:snmp_insecure_version_check"
snmp_weak_cryptography = "bandit.plugins.snmp_security_check:snmp_crypto_check"
logging_config_insecure_listen = "bandit.plugins.logging_config_insecure_listen:logging_config_insecure_listen"
tarfile_unsafe_members = "bandit.plugins.tarfile_unsafe_members:tarfile_unsafe_members"

[tool.setuptools.packages.find]
include = ["bandit", "bandit.*"]

[tool.setuptools_scm]
write_to = "bandit/version.py"

[tool.extras]
yaml = """
PyYAML"""
toml = '''
tomli>=1.1.0; python_version < "3.11"'''

[tool.sphinx-pyproject]
all_files = "1"
build-dir = "doc/build"
source-dir = "doc/source"

#[tool.pbr]
#autodoc_tree_index_modules = "True"
#autodoc_tree_excludes = """
#examples*"""

[tool.setuptools]
include-package-data = false
